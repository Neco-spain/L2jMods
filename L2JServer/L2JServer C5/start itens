diff --git a/L2J4TeamC3/java/config/L24Team.properties b/L2J4TeamC3/java/config/L24Team.properties
new file mode 100644
index 0000000..a0142d1
--- /dev/null
+++ b/L2J4TeamC3/java/config/L24Team.properties
@@ -0,0 +1,15 @@
+#################################################
+#              L2J4TEAM CUSTOMS				#
+#################################################
+
+# Enable or Disable anti-heavy system.
+# Dagger, tyrant, and bow classes won't be able to equip heavy type armours.
+EnableAntiHeavySystem = True
+
+
+# Allow custom starter items?
+AllowCustomStarterItems = false
+
+# You must allow custom starter items!
+# Usage: id,count;id,count;
+CustomStarterItems = 57,1000;
\ No newline at end of file
diff --git a/L2J4TeamC3/java/net/sf/l2j/Config.java b/L2J4TeamC3/java/net/sf/l2j/Config.java
index 3548e29..e91f41c 100644
--- a/L2J4TeamC3/java/net/sf/l2j/Config.java
+++ b/L2J4TeamC3/java/net/sf/l2j/Config.java
@@ -376,6 +376,17 @@
 
 	/*
 	 * *************************************************************************
+	 * * Custom *
+	 */
+	public static boolean ENABLE_ANTI_HEAVY;
+
+	/** General GM access level */
+	public static boolean ALLOW_CUSTOM_STARTER_ITEMS;
+
+	public static List<int[]> CUSTOM_STARTER_ITEMS = new FastList<>();
+
+	/*
+	 * *************************************************************************
 	 * * GM CONFIG General GM AccessLevel *
 	 */
 	/** General GM access level */
@@ -844,6 +855,8 @@
 
 	public static final String CLANHALL_CONFIG_FILE = "./config/clanhall.properties";
 
+	public static final String L24TEAM_CONFIG_FILE = "./config/L24Team.properties";
+
 	public static boolean CHECK_KNOWN;
 
 	/** Game Server login port */
@@ -1450,6 +1463,65 @@
 				throw new Error(
 						"Failed to Load " + CONFIGURATION_FILE + " File.");
 			}
+			// Custom Config
+			try
+			{
+				Properties L24Team = new Properties();
+				InputStream is = new FileInputStream(
+						new File(L24TEAM_CONFIG_FILE));
+				L24Team.load(is);
+				is.close();
+
+				ENABLE_ANTI_HEAVY = Boolean.parseBoolean(
+						L24Team.getProperty("EnableAntiHeavySystem", "True"));
+
+				ALLOW_CUSTOM_STARTER_ITEMS = Boolean.parseBoolean(L24Team
+						.getProperty("AllowCustomStarterItems", "false"));
+
+				if (ALLOW_CUSTOM_STARTER_ITEMS)
+				{
+					String[] propertySplit = L24Team
+							.getProperty("CustomStarterItems", "0,0")
+							.split(";");
+					for (String starteritems : propertySplit)
+					{
+						String[] starteritemsSplit = starteritems.split(",");
+						if (starteritemsSplit.length != 2)
+						{
+							ALLOW_CUSTOM_STARTER_ITEMS = false;
+							System.out.println(
+									"StarterItems[Config.load()]: invalid config property -> starter items \""
+											+ starteritems + "\"");
+						} else
+						{
+							try
+							{
+								CUSTOM_STARTER_ITEMS.add(new int[]
+									{ Integer.valueOf(starteritemsSplit[0]),
+											Integer.valueOf(
+													starteritemsSplit[1]) });
+							} catch (NumberFormatException nfe)
+							{
+								if (!starteritems.equals(""))
+								{
+									ALLOW_CUSTOM_STARTER_ITEMS = false;
+									System.out.println(
+											"StarterItems[Config.load()]: invalid config property -> starter items \""
+													+ starteritems + "\"");
+								}
+							}
+						}
+					}
+				}
+
+			} catch (Exception e)
+			{
+				e.printStackTrace();
+				throw new Error(
+						"Failed to Load " + L24TEAM_CONFIG_FILE + " File.");
+			}
+
+			// Seven Signs Config
 			try
 			{
 				Properties optionsSettings = new Properties();
@@ -1695,28 +1767,6 @@
 			}
 
 			/*
-			 * Load L2J Server Version Properties file (if exists)
-			 */
-			try
-			{
-				Properties serverVersion = new Properties();
-				InputStream is = new FileInputStream(
-						new File(SERVER_VERSION_FILE));
-				serverVersion.load(is);
-				is.close();
-
-				SERVER_VERSION = serverVersion.getProperty("version",
-						"Unsupported Custom Version.");
-				SERVER_BUILD_DATE = serverVersion.getProperty("builddate",
-						"Undefined Date.");
-			} catch (Exception e)
-			{
-				// Ignore Properties file if it doesnt exist
-				SERVER_VERSION = "Unsupported Custom Version.";
-				SERVER_BUILD_DATE = "Undefined Date.";
-			}
-
-			/*
 			 * Load L2J Datapack Version Properties file (if exists)
 			 */
 			try
diff --git a/L2J4TeamC3/java/net/sf/l2j/gameserver/clientpackets/CharacterCreate.java b/L2J4TeamC3/java/net/sf/l2j/gameserver/clientpackets/CharacterCreate.java
index 82b11c7..087eefd 100644
--- a/L2J4TeamC3/java/net/sf/l2j/gameserver/clientpackets/CharacterCreate.java
+++ b/L2J4TeamC3/java/net/sf/l2j/gameserver/clientpackets/CharacterCreate.java
@@ -38,6 +38,7 @@
 import net.sf.l2j.gameserver.model.L2SkillLearn;
 import net.sf.l2j.gameserver.model.L2World;
 import net.sf.l2j.gameserver.model.actor.instance.L2PcInstance;
+import net.sf.l2j.gameserver.model.PcInventory;
 import net.sf.l2j.gameserver.serverpackets.CharCreateFail;
 import net.sf.l2j.gameserver.serverpackets.CharCreateOk;
 import net.sf.l2j.gameserver.serverpackets.CharSelectInfo;
@@ -242,6 +243,26 @@
 			}
 		}
 
+		for (int[] startingItems : Config.CUSTOM_STARTER_ITEMS)
+		{
+			if (newChar == null)
+        {
+           continue;
+        }
+			PcInventory inv = newChar.getInventory();
+			if (ItemTable.getInstance().createDummyItem(startingItems[0]).isStackable())
+			{
+				inv.addItem("Starter Items", startingItems[0], startingItems[1], newChar, null);
+			} 
+			else
+			{
+				for (int i = 0; i < startingItems[1]; i++)
+				{
+					inv.addItem("Starter Items", startingItems[0], 1, newChar, null);
+				}
+			}
+		}
+
 		L2SkillLearn[] startSkills = SkillTreeTable.getInstance()
 				.getAvailableSkills(newChar, newChar.getClassId());
 		for (L2SkillLearn startSkill : startSkills)
diff --git a/L2J4TeamC3/java/net/sf/l2j/gameserver/clientpackets/UseItem.java b/L2J4TeamC3/java/net/sf/l2j/gameserver/clientpackets/UseItem.java
index 30c576a..6436f35 100644
--- a/L2J4TeamC3/java/net/sf/l2j/gameserver/clientpackets/UseItem.java
+++ b/L2J4TeamC3/java/net/sf/l2j/gameserver/clientpackets/UseItem.java
@@ -34,6 +34,7 @@
 import net.sf.l2j.gameserver.serverpackets.ItemList;
 import net.sf.l2j.gameserver.serverpackets.ShowCalculator;
 import net.sf.l2j.gameserver.serverpackets.SystemMessage;
+import net.sf.l2j.gameserver.templates.L2ArmorType;
 import net.sf.l2j.gameserver.templates.L2Item;
 import net.sf.l2j.gameserver.templates.L2Weapon;
 import net.sf.l2j.gameserver.templates.L2WeaponType;
@@ -87,6 +88,17 @@
 
 		if (item == null)
 			return;
+		
+		if (Config.ENABLE_ANTI_HEAVY && item.getItemType() == L2ArmorType.HEAVY) {
+			if (activeChar.getClassId().getId() == 48 || activeChar.getClassId().getId() == 114 || activeChar.getClassId().getId() == 109
+			|| activeChar.getClassId().getId() == 37 || activeChar.getClassId().getId() == 108 || activeChar.getClassId().getId() == 36
+			|| activeChar.getClassId().getId() == 102 || activeChar.getClassId().getId() == 24 || activeChar.getClassId().getId() == 101
+			|| activeChar.getClassId().getId() == 23 || activeChar.getClassId().getId() == 93 || activeChar.getClassId().getId() == 8
+			|| activeChar.getClassId().getId() == 92 || activeChar.getClassId().getId() == 9) {
+			activeChar.sendMessage("Your class can't equip heavy type armors.");
+			return;
+			}
+		} 
 
 		// Alt game - Karma punishment // SOE
 		int itemId = item.getItemId();
